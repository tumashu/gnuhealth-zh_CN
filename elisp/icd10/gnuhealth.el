(defun gnuhealth-replace-disease (a b &rest c)
  (goto-char (point-min))
  (when (and (re-search-forward
              (format ":%s\""
                      (replace-regexp-in-string
                       "[+*.]" "" a))
              nil t)
             (re-search-forward "msgstr \"" nil t))
    (delete-region (point) (line-end-position))
    (insert b)
    (insert "\""))
  (goto-char (point-min)))

(defun gnuhealth-replace-section (a b &rest c)
  (goto-char (point-min))
  (when (and (re-search-forward (format "\"(%s)" a) nil t)
             (re-search-forward "msgstr \"" nil t))
    (delete-region (point) (line-end-position))
    (insert (format "(%s) %s" a b))
    (insert "\""))
  (goto-char (point-min)))

(defun gnuhealth-replace-chapter (a b &rest c)
  (goto-char (point-min))
  (when (and (re-search-forward (format ":icdcat%s\"" a) nil t)
             (re-search-forward "msgstr \"" nil t))
    (delete-region (point) (line-end-position))
    (insert (format "第%s章 %s" a b))
    (insert "\""))
  (goto-char (point-min)))

(defun gnuhealth-generate-batch ()
  "Format a tab split file to a elisp function"
  (interactive)
  (let ((x (completing-read "翻译对象" '(chapter section disease))))
    (goto-char (point-min))
    (while (re-search-forward "\n+" nil t)
      (replace-match "\n" nil t))
    (goto-char (point-min))
    (while (re-search-forward "[[:space:]	\t：]+" nil t)
      (replace-match "\" \"" nil t))
    (goto-char (point-min))
    (while (re-search-forward "^" nil t)
      (replace-match (format "(gnuhealth-replace-%s \"" x) nil t))
    (while (re-search-forward "#N/A" nil t)
      (replace-match "" nil t))
    (goto-char (point-min))
    (while (re-search-forward "\n+" nil t)
      (replace-match "\")\n" nil t))
    (goto-char (point-min))
    (insert (format
             "
(defun gnuhealth_replace_all_%s ()
  (interactive)
" x))
    (goto-char (point-max))
    (insert ")")))
